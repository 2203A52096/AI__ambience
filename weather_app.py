# -*- coding: utf-8 -*-
"""weather_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12ILnLnnKhd6oIT9ONxLZTFQXlwXjWqiI
"""
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
import pandas as pd
import numpy as np
import os

@st.cache_data
def load_data():
    file_path = "seattle-weather.csv"  # Ensure correct filename

    if not os.path.exists(file_path):
        st.error(f"Dataset not found: {file_path}. Please upload the dataset.")
        return None  # Return None if file is missing

    return pd.read_csv(file_path)

df = load_data()

# Check if data loaded successfully
if df is None:
    st.stop() 

# Load trained SVM model
import pickle  
@st.cache_resource
def load_model():
    with open("model.pkl", "rb") as model_file:  # Open the model in binary read mode
        model = pickle.load(model_file)
    return model

model = load_model()
weather_mapping = {0: "Sun", 1: "Snow", 2: "Rain", 3: "Drizzle", 4: "Fog"}
# Sidebar navigation
st.sidebar.title("Navigation")
page = st.sidebar.radio("Go to", ["Home", "Prediction", "About"])

# Home Page
if page == "Home":
    # Set Streamlit page configuration
    st.set_page_config(
        page_title="Climate Insight AI",
        page_icon="üåç",
        layout="wide"
    )

    # Custom CSS for better UI
    st.markdown(
        """
        <style>
        body {
            background-color: #f5f5f5;
        }
        .main-content {
            text-align: center;
            font-size: 20px;
        }
        .title {
            font-size: 40px;
            font-weight: bold;
            color: #007bff;
            text-align: center;
        }
        .subtitle {
            font-size: 24px;
            font-weight: bold;
            color: #333;
            text-align: center;
        }
        .info-box {
            background-color: #ffffff;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }
        </style>
        """,
        unsafe_allow_html=True
    )

    # ----------- HOME PAGE -----------
    st.markdown("<p class='title'>üåç Climate Insight AI</p>", unsafe_allow_html=True)
    st.markdown("<p class='subtitle'>Your AI-Powered Climate Prediction Assistant</p>", unsafe_allow_html=True)

    # Section with an image and description
    col1, col2 = st.columns([1, 2])

    with col1:
        st.image("climate_image.jpg", use_container_width=True)  # Ensure the image exists in your project

    with col2:
        st.markdown(
            """
            <div class='info-box'>
            üåé **Why Climate Matters?**  
            Climate change affects agriculture, water resources, health, and the economy.  
            Understanding patterns can help us prepare for extreme weather and mitigate risks.
            </div>
            """,
            unsafe_allow_html=True
        )

    # Features Section
    st.markdown("<p class='subtitle'>üöÄ What This App Offers</p>", unsafe_allow_html=True)
    st.markdown(
        """
        - **üå¶ Predict Weather Conditions**: Get AI-driven forecasts based on past climate data.
        - **üìä Data Insights**: Explore box plots and histograms of climate patterns.
        - **üì° Real-Time Analysis**: Understand key trends and how climate is changing.
        - **‚ö° Easy to Use**: A user-friendly interface powered by AI.
        """
    )

    # Call to action
    st.markdown(
        "<p class='subtitle'>üõ† Start Exploring Now!</p>",
        unsafe_allow_html=True
    )
    st.write("Navigate to the **Prediction** page to test the model, or check the **About** section for visual insights.")

    image_path = "climate_image.png"
    st.image(image_path, use_container_width=True)  

# Prediction Page
elif page == "Prediction":
    st.title("üîÆ Climate Prediction")
    st.write("Enter weather conditions to predict the category of the climate.")

    # User inputs
    temp_max = st.slider("Max Temperature (¬∞C)", df["temp_max"].min(), df["temp_max"].max(), df["temp_max"].median())
    temp_min = st.slider("Min Temperature (¬∞C)", df["temp_min"].min(), df["temp_min"].max(), df["temp_min"].median())
    precipitation = st.number_input("Precipitation (mm)", df["precipitation"].min(), df["precipitation"].max(), df["precipitation"].median())
    wind = st.number_input("Wind Speed (km/h)", df["wind"].min(), df["wind"].max(), df["wind"].median())
    model = load_model()
    input_data = [[precipitation, temp_max, temp_min, wind]]
    

    if st.button("Predict"):
        prediction = model.predict(input_data)[0]  # Get prediction
        predicted_weather = weather_mapping.get(prediction, "Unknown")  # Map prediction
        
        st.success(f"Predicted Weather: **{predicted_weather}**")
# About Page (Pre-Saved Data Visualizations)
elif page == "About":
    st.title("üìä Data Visualizations")
    st.write("Explore the dataset through **box plots** and **histograms**.")
    st.subheader("Box Plots")
    for column in df.select_dtypes(include=['int64', 'float64']).columns:
        fig, ax = plt.subplots(figsize=(8, 6))
        sns.boxplot(x=df[column], ax=ax)
        ax.set_title(f'Box Plot of {column}')
        st.pyplot(fig)  # Show the plot

    # Display Histograms
    st.subheader("Histograms")
    for column in df.select_dtypes(include=['int64', 'float64']).columns:
        fig, ax = plt.subplots(figsize=(8, 6))
        sns.histplot(df[column], bins=30, kde=True, ax=ax)
        ax.set_title(f'Histogram of {column}')
        st.pyplot(fig)  # Show the plot

