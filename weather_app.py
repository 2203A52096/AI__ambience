# -*- coding: utf-8 -*-
"""weather_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12ILnLnnKhd6oIT9ONxLZTFQXlwXjWqiI
"""
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
import pandas as pd
import numpy as np
import os
import pickle  
import random

st.set_page_config(page_title="ClimAIte", page_icon="‚òÄÔ∏è", layout="wide")

@st.cache_data
def load_data():
    file_path = "seattle-weather.csv"
    if not os.path.exists(file_path):
        st.error(f"Dataset not found: {file_path}. Please upload the dataset.")
        return None
    return pd.read_csv(file_path)

df = load_data()

if df is None:
    st.stop() 

@st.cache_resource
def load_model():
    with open("model.pkl", "rb") as model_file:
        model = pickle.load(model_file)
    return model

model = load_model()
weather_mapping = {0: "Sun", 1: "Snow", 2: "Rain", 3: "Drizzle", 4: "Fog"}

clothing_recommendations = {
    "Sun": "Wear light clothing to stay cool.\n\n**Men:**\n- T-shirt with shorts and sneakers\n- Polo shirt with lightweight chinos and loafers\n\n**Women:**\n- Sundress with sandals\n- Tank top with shorts and sneakers",
    "Snow": "Dress in warm layers to protect from the cold.\n\n**Men:**\n- Thermal jacket, sweater, jeans, boots, gloves, and a beanie\n- Heavy coat, wool sweater, thick pants, snow boots, and a scarf\n\n**Women:**\n- Wool coat, sweater, leggings, boots, gloves, and a scarf\n- Puffer jacket, turtleneck, fleece-lined leggings, snow boots, and a beanie",
    "Rain": "Stay dry with waterproof clothing.\n\n**Men:**\n- Raincoat, waterproof pants, boots, and an umbrella\n- Hooded windbreaker, jeans, waterproof sneakers, and a cap\n\n**Women:**\n- Trench coat, waterproof leggings, boots, and an umbrella\n- Light rain jacket, skinny jeans, waterproof boots, and a hat",
    "Drizzle": "Light rain protection is sufficient.\n\n**Men:**\n- Hoodie, jeans, and sneakers\n- Light rain jacket, cargo pants, and casual shoes\n\n**Women:**\n- Light raincoat, jeans, and ankle boots\n- Cardigan, leggings, and waterproof flats",
    "Fog": "Wear warm clothes and bright colors for visibility.\n\n**Men:**\n- Jacket, sweater, jeans, and a cap\n- Windbreaker, joggers, and sneakers\n\n**Women:**\n- Warm cardigan, pants, and boots\n- Trench coat, sweater, leggings, and high-top sneakers"
}

food_recommendations = {
    "Sun": "Stay hydrated and eat refreshing foods!\n\n**Recommended meals:**\n- Fresh fruit salads with watermelon, mango, and berries\n- Cold sandwiches with grilled chicken, avocado, and lettuce\n- Yogurt parfaits with granola and honey\n- Smoothies with banana, spinach, and almond milk\n- Grilled vegetables with lean protein like chicken or fish",
    "Snow": "Eat warm and hearty meals to stay cozy!\n\n**Recommended meals:**\n- Hot soups like chicken noodle, tomato soup, or lentil soup\n- Stews with beef, potatoes, and root vegetables\n- Roasted meats like lamb or turkey with mashed potatoes\n- Baked goods such as warm apple pie or cinnamon rolls\n- Warm drinks like hot chocolate, spiced tea, or mulled wine",
    "Rain": "Comfort foods make rainy days better!\n\n**Recommended meals:**\n- Hot tea or coffee with biscuits\n- Warm soups like miso soup, creamy mushroom soup, or pho\n- Spicy noodles such as ramen or stir-fried udon\n- Grilled cheese sandwiches with tomato soup\n- Fried snacks like pakoras, samosas, or tempura",
    "Drizzle": "A mix of light but warm meals works well!\n\n**Recommended meals:**\n- Herbal tea with honey and lemon\n- Warm sandwiches with turkey, cheese, and spinach\n- Porridge with cinnamon, nuts, and raisins\n- Light pasta dishes with olive oil, garlic, and cherry tomatoes",
    "Fog": "Warm, comforting meals are best!\n\n**Recommended meals:**\n- Oatmeal with nuts, honey, and dried fruits\n- Warm vegetable soup with crusty bread\n- Hot cocoa with marshmallows or whipped cream\n- Steamed dumplings with soy sauce dip"
}

weather_jokes = [
    "Why did the sun go to school? To get a little brighter! ‚òÄÔ∏è",
    "What does a cloud wear under his raincoat? Thunderwear! ‚õàÔ∏è",
    "What happens when it rains cats and dogs? You might step in a poodle! üê∂",
    "Why did the tornado break up with the hurricane? Because it needed some space! üå™Ô∏è",
    "How does a snowman get around? By riding an ‚Äòicicle‚Äô! ‚õÑ"
]

st.sidebar.title("Navigation")
page = st.sidebar.radio("Go to", ["Home", "Prediction", "Recommendations"])

if page == "Home":
    st.title("üåç Welcome to ClimAIte")
    st.markdown(f"""
        **Your AI-powered climate prediction assistant!** ‚ùÑÔ∏èüå§Ô∏è‚òî
        
        **Why Climate Prediction Matters:**
        - Helps farmers prepare for changing weather conditions.  
        - Assists policymakers in environmental planning.  
        - Supports businesses in mitigating weather-related risks.  
        
        **Fun Fact:** {random.choice(weather_jokes)}
        
        Navigate to the **Prediction** tab to see AI-powered weather forecasts!
    """)
    st.image("climate_image.png", width=500)

elif page == "Prediction":
    st.title("üîÆ Climate Prediction")
    st.write("Enter weather conditions to predict the category of the climate.")
    temp_max = st.slider("Max Temperature (¬∞C)", df["temp_max"].min(), df["temp_max"].max(), df["temp_max"].median())
    temp_min = st.slider("Min Temperature (¬∞C)", df["temp_min"].min(), df["temp_min"].max(), df["temp_min"].median())
    precipitation = st.number_input("Precipitation (mm)", df["precipitation"].min(), df["precipitation"].max(), df["precipitation"].median())
    wind = st.number_input("Wind Speed (km/h)", df["wind"].min(), df["wind"].max(), df["wind"].median())
    input_data = [[precipitation, temp_max, temp_min, wind]]
    if st.button("Predict"):
        prediction = model.predict(input_data)[0]
        st.success(f"Predicted Weather: **{weather_mapping.get(prediction, 'Unknown')}**")

elif page == "Recommendations":
    st.title("üëïüç≤ Clothing & Food Recommendations")
    weather_choice = st.selectbox("Select Weather Condition", list(weather_mapping.values()))
    st.subheader("üëï Clothing Recommendation")
    st.write(clothing_recommendations.get(weather_choice, "No recommendation available."))
    st.subheader("üç≤ Food Recommendation")
    st.write(food_recommendations.get(weather_choice, "No recommendation available."))
