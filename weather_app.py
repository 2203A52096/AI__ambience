# -*- coding: utf-8 -*-
"""weather_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12ILnLnnKhd6oIT9ONxLZTFQXlwXjWqiI
"""

import streamlit as st
import pandas as pd
import numpy as np
import os

@st.cache_data
def load_data():
    file_path = "seattle-weather.csv"  # Ensure correct filename

    if not os.path.exists(file_path):
        st.error(f"Dataset not found: {file_path}. Please upload the dataset.")
        return None  # Return None if file is missing

    return pd.read_csv(file_path)

df = load_data()

# Check if data loaded successfully
if df is None:
    st.stop() 

# Load trained SVM model
import pickle  
@st.cache_resource
def load_model():
    with open("model.pkl", "rb") as model_file:  # Open the model in binary read mode
        model = pickle.load(model_file)
    return model

model = load_model()

# Sidebar navigation
st.sidebar.title("Navigation")
page = st.sidebar.radio("Go to", ["Home", "Prediction", "About"])

# Home Page
if page == "Home":
    st.title("üåç Welcome to ClimAIte")
    st.markdown("""
        Climate change is a major challenge affecting our planet.
        Our **AI-powered climate prediction tool** helps analyze weather data
        to provide valuable insights into future climate trends.

        ### Why Climate Prediction Matters:
        - Helps farmers prepare for changing weather conditions.
        - Assists policymakers in environmental planning.
        - Supports businesses in mitigating weather-related risks.

        Navigate to the **Prediction** tab to see AI-powered weather forecasts!
    """)
    st.image("climate_image.jpg", use_column_width=True)  # Add an image if available

# Prediction Page
elif page == "Prediction":
    st.title("üîÆ Climate Prediction")
    st.write("Enter weather conditions to predict the category of the climate.")

    # User inputs
    temp_max = st.slider("Max Temperature (¬∞C)", df["temp_max"].min(), df["temp_max"].max(), df["temp_max"].median())
    temp_min = st.slider("Min Temperature (¬∞C)", df["temp_min"].min(), df["temp_min"].max(), df["temp_min"].median())
    precipitation = st.number_input("Precipitation (mm)", df["precipitation"].min(), df["precipitation"].max(), df["precipitation"].median())
    wind = st.number_input("Wind Speed (km/h)", df["wind"].min(), df["wind"].max(), df["wind"].median())

    # Prediction button
    if st.button("Predict"):
        features = np.array([[precipitation, temp_max, temp_min, wind]])  # Adjust feature order based on model training
        prediction = model.predict(features)
        st.success(f"Predicted Weather Condition: **{prediction[0]}**")

# About Page (Pre-Saved Data Visualizations)
elif page == "About":
    st.title("üìä Data Visualizations")
    st.write("Explore the dataset through **box plots** and **histograms**.")

    # Define paths to pre-saved images
    boxplot_dir = "boxplots"  # Ensure this directory exists and contains the saved images
    histogram_dir = "histograms"  # Ensure this directory exists and contains the saved images

    # Display Box Plots
    st.subheader("Box Plots of Weather Variables")
    for column in df.columns:
        file_path = os.path.join(boxplot_dir, f"{column}_boxplot.png")
        if os.path.exists(file_path):
            st.image(file_path, caption=f"Box Plot of {column}")

    # Display Histograms
    st.subheader("Histograms of Weather Variables")
    for column in df.columns:
        file_path = os.path.join(histogram_dir, f"{column}_histogram.png")
        if os.path.exists(file_path):
            st.image(file_path, caption=f"Histogram of {column}")

    st.write("This analysis helps in understanding the distribution of climate features.")
